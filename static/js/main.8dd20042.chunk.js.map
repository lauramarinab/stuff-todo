{"version":3,"sources":["assets/icon/pallino.svg","assets/icon/checked-pallino.svg","assets/icon/remove.svg","assets/icon/plus.svg","components/ListTodo/styles.tsx","actions/index.ts","components/ListTodo/Todo.tsx","containers/ListContainer.tsx","components/ListTodo/List.tsx","components/Input/styles.tsx","components/Input/Input.tsx","containers/InputContainer.tsx","components/HelloLaura.tsx","components/AnalysisTodo.tsx","containers/AnalysisTodoContainer.tsx","App.tsx","registerServiceWorker.ts","reducers/index.ts","index.tsx"],"names":["module","exports","actions","TitleSection","styled","div","TodoWrapper","TextTodo","span","props","completed","pallino","require","checkedPallino","remove","Todo","id","description","onToggle","onRemove","React","overlayButton","setOverlayButton","todoIsVisible","setTodoIsVisible","setTimeout","CSSTransition","in","timeout","enter","exit","status","onClick","style","cursor","className","onMouseEnter","onMouseLeave","display","alignItems","src","ListContainer","connect","state","todos","dispatch","type","TOGGLE_TODO","toggleTodo","REMOVE_TODO","removeTodo","marginTop","width","map","todo","key","InputStyled","input","showAddButton","InputWrapper","plus","InputContainer","value","onChangeInput","ONCHANGE_INPUT","onChangeTodoInput","onAddTodo","ADD_TODO","addTodo","toggleAddButton","show","TOGGLE_ADD_BUTTON","onChange","e","target","placeholder","onKeyPress","onFocus","onBlur","Hello","h2","HelloLaura","AnalysisWrapper","AnalysisTodoContainer","allTodos","length","completedTodos","filter","t","notCompletedTodos","perCent","notCompleted","toFixed","perCentNotCompleted","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","v4","trash","category","store","createStore","action","REMOVE_COMPLETED_TODO","ReactDOM","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8dd20042.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pallino.3f3ef3a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked-pallino.593ef174.svg\";","module.exports = __webpack_public_path__ + \"static/media/remove.7e444d02.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.509ee1f4.svg\";","import styled from \"styled-components\";\n\nconst TitleSection = styled.div`\n  color: var(--dark-salmon);\n  font-size: 15px;\n  background: white;\n  z-index: 1;\n`;\n\nconst TodoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 5px 0px;\n  justify-content: space-between;\n\n  position: relative;\n  opacity: 0;\n  left: -600px;\n  transition: opacity 0.3s, left 0.5s;\n  z-index: 0;\n\n  &.wrapper-entering {\n    opacity: 0;\n    left: -600px;\n  }\n  &.wrapper-entered {\n    opacity: 1;\n    left: 0px;\n  }\n  &.wrapper-exting {\n    opacity: 0;\n    left: -600px;\n  }\n  &.wrapper-exited {\n    opacity: 0;\n    left: -600px;\n  }\n`;\n\nconst TextTodo = styled.span<{ completed: boolean }>`\n  color: var(--dark-grey);\n  font-size: 15px;\n  margin-left: 10px;\n  text-decoration: ${props => (props.completed ? \"line-through\" : \"none\")};\n`;\n\nexport { TitleSection, TodoWrapper, TextTodo };\n","export enum actions {\n  ADD_TODO = \"ADD_TODO\",\n  TOGGLE_TODO = \"TOGGLE_TODO\",\n  REMOVE_TODO = \"REMOVE_TODO\",\n  ONCHANGE_INPUT = \"ONCHANGE_INPUT\",\n  REMOVE_COMPLETED_TODO = \"REMOVE_COMPLETED_TODO\",\n  TOGGLE_ADD_BUTTON = \"TOGGLE_ADD_BUTTON\"\n}\n\nexport const addTodo = (description: string) => ({\n  description,\n  type: actions.ADD_TODO\n});\n\nexport const toggleTodo = (id: string) => ({\n  id,\n  type: actions.TOGGLE_TODO\n});\n\nexport const removeTodo = (id: string) => ({\n  id,\n  type: actions.REMOVE_TODO\n});\n\nexport const onChangeTodoInput = (value: string) => ({\n  value,\n  type: actions.ONCHANGE_INPUT\n});\n\nexport const removeCompletedTodo = () => ({\n  type: actions.REMOVE_COMPLETED_TODO\n});\n\nexport const toggleAddButton = (show: boolean) => ({\n  show,\n  type: actions.TOGGLE_ADD_BUTTON\n});\n","import * as React from \"react\";\nimport { TodoT } from \"src/types/Todo\";\nimport { TodoWrapper, TextTodo } from \"./styles\";\nimport { CSSTransition } from \"react-transition-group\";\n\nconst pallino = require(\"../../assets/icon/pallino.svg\");\nconst checkedPallino = require(\"../../assets/icon/checked-pallino.svg\");\nconst remove = require(\"../../assets/icon/remove.svg\");\n\ntype SimplifyTodoProps = Omit<TodoT, \"category\" | \"trash\">;\n\ntype Props = SimplifyTodoProps & {\n  onToggle: (id: string) => void;\n  onRemove: (id: string) => void;\n};\n\nconst Todo: React.FC<Props> = ({ id, description, completed, onToggle, onRemove }) => {\n  const [overlayButton, setOverlayButton] = React.useState(false);\n  const [todoIsVisible, setTodoIsVisible] = React.useState(true);\n\n  React.useEffect(() => {\n    if (!todoIsVisible) {\n      setTimeout(() => onRemove(id), 400);\n    }\n  }, [todoIsVisible]);\n\n  return (\n    <CSSTransition in={todoIsVisible} timeout={{ enter: 300, exit: 400 }}>\n      {status => (\n        <TodoWrapper\n          onClick={() => onToggle(id)}\n          style={{ cursor: \"pointer\" }}\n          className={`wrapper-${status}`}\n          onMouseEnter={() => setOverlayButton(true)}\n          onMouseLeave={() => setOverlayButton(false)}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            {completed ? <img src={checkedPallino} /> : <img src={pallino} />}\n            <TextTodo completed={completed}>{description}</TextTodo>\n          </div>\n          {overlayButton && <img src={remove} onClick={() => setTodoIsVisible(false)} />}\n        </TodoWrapper>\n      )}\n    </CSSTransition>\n  );\n};\n\nexport { Todo };\n","import { connect } from \"react-redux\";\nimport { List } from \"../components//ListTodo/List\";\nimport { State } from \"src/reducers\";\nimport { toggleTodo, removeTodo } from \"src/actions\";\n\nconst mapStateToProps = (state: State) => {\n  return {\n    todos: state.todos\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onToggle: (id: string) => dispatch(toggleTodo(id)),\n  onRemove: (id: string) => dispatch(removeTodo(id))\n});\n\nconst ListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(List);\n\nexport { ListContainer };\n","import * as React from \"react\";\nimport { TodoT } from \"./../../types/Todo\";\nimport { Todo } from \"./Todo\";\nimport { TitleSection } from \"./styles\";\n\ninterface Props {\n  todos: TodoT[];\n  onToggle: (id: string) => void;\n  onRemove: (id: string) => void;\n}\n\nconst List: React.FC<Props> = ({ todos, onToggle, onRemove }) => {\n  return (\n    <div style={{ marginTop: 50 }}>\n      <TitleSection>All to do</TitleSection>\n      <div style={{ marginTop: 10, width: \"460px\" }}>\n        {todos.map(todo => (\n          <Todo\n            key={todo.id}\n            id={todo.id}\n            completed={todo.completed}\n            description={todo.description}\n            onToggle={onToggle}\n            onRemove={onRemove}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport { List };\n","import styled from \"styled-components\";\n\nconst InputStyled = styled.input<{ showAddButton: boolean } & React.HTMLProps<HTMLInputElement>>`\n  height: 40px;\n  border: none;\n  font-size: 20px;\n  padding: 20px 0px;\n  color: var(--dark-grey);\n  width: 100%;\n  margin-left: ${props => (props.showAddButton ? 15 : 0)}px;\n  transition: margin 0.5s;\n\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n    color: var(--light-grey);\n  }\n  &:placeholder-shown {\n    font-size: 20px;\n    padding: 20px 0px;\n    margin-left: ${props => (props.showAddButton ? 15 : 0)}px;\n    transition: margin 0.4s;\n  }\n`;\n\nconst InputWrapper = styled.div`\n  border-bottom-width: 2px;\n  border-bottom-color: var(--medium-grey);\n  border-bottom-style: solid;\n  width: 460px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 20px;\n`;\n\nexport { InputStyled, InputWrapper };\n","import * as React from \"react\";\nimport { InputStyled, InputWrapper } from \"./styles\";\n\nconst plus = require(\"../../assets/icon/plus.svg\");\nconst pallino = require(\"../../assets/icon/pallino.svg\");\n\ninterface Props {\n  value: string;\n  showAddButton: boolean;\n  onChangeInput: (value: string) => void;\n  onAddTodo: (description: string) => void;\n  toggleAddButton: (show: boolean) => void;\n}\n\nconst Input: React.FC<Props> = ({ value, showAddButton, onChangeInput, onAddTodo, toggleAddButton }) => {\n  return (\n    <InputWrapper>\n      {showAddButton && <img src={pallino} />}\n      <InputStyled\n        type=\"text\"\n        value={value}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChangeInput(e.target.value)}\n        placeholder=\"Cosa devi fare oggi?\"\n        onKeyPress={e => (e.key === \"Enter\" && value !== \"\" ? onAddTodo(value) : null)}\n        onFocus={() => toggleAddButton(true)}\n        onBlur={() => value === \"\" && toggleAddButton(false)}\n        showAddButton={showAddButton}\n      />\n      {showAddButton && <img src={plus} onClick={() => value !== \"\" && onAddTodo(value)} />}\n    </InputWrapper>\n  );\n};\n\nexport { Input };\n","import { connect } from \"react-redux\";\nimport { Input } from \"../components/Input/Input\";\nimport { State } from \"src/reducers\";\nimport { addTodo, onChangeTodoInput, toggleAddButton } from \"src/actions\";\n\nconst mapStateToProps = (state: State) => {\n  return {\n    value: state.value,\n    showAddButton: state.showAddButton\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onChangeInput: (value: string) => dispatch(onChangeTodoInput(value)),\n  onAddTodo: (description: string) => dispatch(addTodo(description)),\n  toggleAddButton: (show: boolean) => dispatch(toggleAddButton(show))\n});\n\nconst InputContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Input);\n\nexport { InputContainer };\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nconst Hello = styled.h2`\n  font-size: 50px;\n  color: var(--primary-salmon);\n`;\n\nconst HelloLaura: React.FC<{}> = ({}) => {\n  return <Hello>Hello Laura!</Hello>;\n};\n\nexport { HelloLaura };\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { TodoT } from \"src/types/Todo\";\nimport { CSSTransition } from \"react-transition-group\";\n\nconst AnalysisWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 15px 0px 25px;\n  & > span {\n    font-size: 12px;\n    color: var(--dark-grey);\n  }\n\n  & > span:not(:last-child)::after {\n    content: \"|\";\n    font-size: 16px;\n    padding: 0px 20px;\n  }\n\n  opacity: 0;\n  transition: opacity 0.3s;\n\n  &.wrapper-entering {\n    opacity: 0;\n  }\n  &.wrapper-entered {\n    opacity: 1;\n  }\n  &.wrapper-exiting {\n    opacity: 0;\n  }\n  &.wrapper-exited {\n    opacity: 0;\n  }\n`;\n\ntype Props = {\n  todos: TodoT[];\n};\n\nconst perCentNotCompleted = (todos: number, notCompleted: number) => {\n  if (todos > 0) {\n    return ((notCompleted / todos) * 100).toFixed(0);\n  }\n  return \"100\";\n};\n\nconst AnalysisTodo: React.FC<Props> = ({ todos }) => {\n  const allTodos = todos.length;\n  const completedTodos = todos.filter(t => t.completed).length;\n\n  const notCompletedTodos = todos.filter(t => !t.completed).length;\n\n  const perCent = perCentNotCompleted(allTodos, notCompletedTodos);\n\n  return (\n    <CSSTransition in={todos.length > 0} timeout={{ enter: 300, exit: 500 }}>\n      {status => (\n        <AnalysisWrapper className={`wrapper-${status}`}>\n          <span>{`${allTodos} - to do`}</span>\n          <span>{`${completedTodos} - completate`}</span>\n          <span>{`${perCent}% da completare`}</span>\n        </AnalysisWrapper>\n      )}\n    </CSSTransition>\n  );\n};\n\nexport { AnalysisTodo };\n","import { connect } from \"react-redux\";\nimport { State } from \"src/reducers\";\nimport { AnalysisTodo } from \"src/components/AnalysisTodo\";\n\nconst mapStateToProps = (state: State) => {\n  return {\n    todos: state.todos\n  };\n};\n\nconst AnalysisTodoContainer = connect(mapStateToProps)(AnalysisTodo);\n\nexport { AnalysisTodoContainer };\n","import * as React from \"react\";\nimport { ListContainer } from \"./containers/ListContainer\";\nimport { InputContainer } from \"./containers/InputContainer\";\nimport { HelloLaura } from \"./components/HelloLaura\";\nimport { AnalysisTodoContainer } from \"./containers/AnalysisTodoContainer\";\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <>\n        <HelloLaura />\n        <AnalysisTodoContainer />\n        <InputContainer />\n        <ListContainer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { TodoT } from \"./../types/Todo\";\nimport { actions } from \"./../actions/index\";\nimport { v4 } from \"uuid\";\n\nexport type State = {\n  todos: Array<TodoT>;\n  value: string;\n  showAddButton: boolean;\n};\n\nconst initialTodoState: Array<TodoT> = [\n  { id: v4(), description: \"Comprare il pane\", completed: false, trash: false, category: null },\n  { id: v4(), description: \"Comprare la farina\", completed: true, trash: false, category: null },\n  { id: v4(), description: \"Comprare acqua\", completed: true, trash: false, category: null }\n];\n\nconst initialState: State = {\n  todos: initialTodoState,\n  value: \"\",\n  showAddButton: false\n};\n\nexport const todos = (state: State = initialState, action: any) => {\n  switch (action.type) {\n    case actions.ADD_TODO:\n      return {\n        ...state,\n        value: \"\",\n        todos: [\n          ...state.todos,\n          { id: v4(), description: action.description, completed: false, trash: false, category: null }\n        ]\n      };\n    case actions.REMOVE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => action.id !== todo.id)\n      };\n    case actions.TOGGLE_TODO:\n      return {\n        ...state,\n        todos: state.todos.map(todo => ({\n          ...todo,\n          completed: action.id === todo.id ? !todo.completed : todo.completed\n        }))\n      };\n    case actions.ONCHANGE_INPUT:\n      return {\n        ...state,\n        value: action.value\n      };\n    case actions.REMOVE_COMPLETED_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => !todo.completed)\n      };\n    case actions.TOGGLE_ADD_BUTTON:\n      return {\n        ...state,\n        showAddButton: action.show\n      };\n    default:\n      return state;\n  }\n};\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { todos } from \"./reducers\";\n\nconst store = createStore(todos);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\") as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}